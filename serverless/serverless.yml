org: sheikfaridh
app: serverless
service: serverless-email-reminder

provider:
  name: aws
  runtime: nodejs20.x
  profile: email_reminder_profile
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  environment:
    EVENTBRIDGE_ROLE_ARN: !GetAtt EventBridgeRole.Arn
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: '*'
    - Effect: Allow
      Action:
        - events:PutRule
        - events:PutTargets
        - events:ListRules
        - events:ListTargetsByRule
      Resource: '*'
    - Effect: Allow
      Action:
        - scheduler:CreateSchedule
        - scheduler:DeleteSchedule
        - scheduler:GetSchedule
        - scheduler:ListSchedules
        - scheduler:UpdateSchedule
      Resource: '*'
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: !GetAtt EventBridgeRole.Arn

functions:
  emailSender:
    handler: functions/email-sender.sendEmail
    name: EmailSenderFunction
    timeout: 10

  createSchedules:
    handler: functions/scheduler.createSchedules
    environment:
      EMAIL_SENDER_ARN: !GetAtt EmailSenderLambdaFunction.Arn
    timeout: 20
    events:
      - http:
          path: create-schedules
          method: post
          cors: true

  updateSchedule:
    handler: functions/scheduler.updateSchedule
    environment:
      EMAIL_SENDER_ARN: !GetAtt EmailSenderLambdaFunction.Arn
    timeout: 15
    events:
      - http:
          path: update-schedule
          method: put
          cors: true

  listSchedules:
    handler: functions/scheduler.listSchedules
    timeout: 20
    events:
      - http:
          path: list-schedules
          method: get
          cors: true

  deleteSchedule:
    handler: functions/scheduler.deleteSchedule
    timeout: 15
    events:
      - http:
          path: delete-schedule
          method: delete
          cors: true

resources:
  Outputs:
    EmailSenderFunctionArn:
      Value: !GetAtt EmailSenderLambdaFunction.Arn
      Export:
        Name: EmailSenderFunctionArn

  Resources:
    LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}
        RetentionInDays: 3
    EventBridgeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
                  - scheduler.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AllowLambdaInvoke
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:EmailSenderFunction
          - PolicyName: EventBridgeSchedulerPermissions
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - scheduler:CreateSchedule
                    - scheduler:DeleteSchedule
                    - scheduler:GetSchedule
                    - scheduler:ListSchedules
                    - scheduler:UpdateSchedule
                  Resource: '*'
